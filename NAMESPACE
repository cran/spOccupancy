useDynLib(spOccupancy, .registration=TRUE)

export(PGOcc)
export(simOcc)
export(spPGOcc)
export(simMsOcc)
export(msPGOcc)
export(spMsPGOcc)
export(simIntOcc)
export(intPGOcc)
export(spIntPGOcc)
export(ppcOcc)
export(waicOcc)

S3method("predict", "PGOcc")
S3method("print", "PGOcc")
S3method("fitted", "PGOcc")
S3method("summary", "PGOcc")

S3method("summary", "ppcOcc")

S3method("predict", "spPGOcc")
S3method("print", "spPGOcc")
S3method("fitted", "spPGOcc")
S3method("summary", "spPGOcc")

S3method("predict", "msPGOcc")
S3method("print", "msPGOcc")
S3method("fitted", "msPGOcc")
S3method("summary", "msPGOcc")

S3method("predict", "spMsPGOcc")
S3method("print", "spMsPGOcc")
S3method("fitted", "spMsPGOcc")
S3method("summary", "spMsPGOcc")

S3method("predict", "intPGOcc")
S3method("print", "intPGOcc")
S3method("fitted", "intPGOcc")
S3method("summary", "intPGOcc")

S3method("predict", "spIntPGOcc")
S3method("print", "spIntPGOcc")
S3method("fitted", "spIntPGOcc")
S3method("summary", "spIntPGOcc")

importFrom("stats", "dist", "rbinom", "rnorm", "coefficients", "glm", "is.empty.model", "model.matrix", "model.response", "terms", "runif", "quantile", "dbinom", "var", "rgamma", "sd")
importFrom("coda", "mcmc", "gelman.diag", "mcmc.list", "effectiveSize")
importFrom("abind", "abind")
importFrom("RANN", "nn2")
importFrom("lme4", "findbars", "mkReTrms", "nobars")
importFrom("foreach", "foreach", "%do%", "%dopar%")
importFrom("doParallel", "registerDoParallel", "stopImplicitCluster")
importFrom("spBayes", "mkSpCov")
